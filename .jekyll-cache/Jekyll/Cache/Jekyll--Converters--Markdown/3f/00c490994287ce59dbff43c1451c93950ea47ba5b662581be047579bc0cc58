I"r
<h3 id="the-case-we-are-handling-a-2-layers-network"><center>The case we are handling: a 2 layers network</center></h3>

<p><img src="\images\machine_learning\2layer_nn_bpp.png" alt="2layer_nn_bpp" /></p>

<!-- more -->

<p>The above diagram shows the network to be used. From the last blog we get the loss function:</p>

\[\mathscr{L}=arg\min_W\sum_i^N-log(\frac{e^{f_{y_i}}}{\sum\limits_j^Ce^{f_j}})\]

<p>In order to use the gradient descent algorithm to train \(\scriptsize W_1\) and \(\scriptsize W_2\), we need to compute the derivative of \(\scriptsize\mathscr{L}\) to \(\scriptsize W_1\) and \(\scriptsize W_2\), which are:</p>

\[\frac{d\mathscr{L}}{dW_1}\space and\space \frac{d\mathscr{L}}{dW_2}\]

<p>If we have \(\scriptsize \frac{d\mathscr{L}}{dW_2}\) by hand, then \(\scriptsize W_2\) can be trained using gradient descent:</p>

\[W_2^{i+1} =W_2^{i}-\lambda\Delta\frac{d\mathscr{L}}{dW_2^i}\]

<h3 id="compute-fracdmathscrldw_2">Compute $\frac{d\mathscr{L}}{dW_2}$</h3>

<p>How to compute \(\scriptsize \frac{d\mathscr{L}}{dW_2}\)? We use the chain rule to “propagate back” the gradient, for \(\scriptsize W_2\):</p>

\[\frac{d\mathscr{L}}{dW_2}=\frac{d\mathscr{L}}{df}\cdot \frac{df}{dW_2}\]

<p>As the last blog described, \(\scriptsize \frac{d\mathscr{L}}{df}\) of the \(\scriptsize ith\) sample can be expressed as:</p>

\[\frac{\mathscr{dL}_i}{\mathscr{d}f_i}=\begin{cases}
P_{y_i}-1\space\space\space\space for\space(j_i= y_i)\\
\\
P_{j_i}\space\space\space\space\space\space\space\space\space\space\space for\space(j_i\neq y_i)
\end{cases}\]

<p>considering \(\scriptsize f=W_2\cdot X_2+b_2\):</p>

\[\frac{df}{dW_2} = X_2\]

<p>then:</p>

\[\frac{d\mathscr{L}}{dW_2}=\frac{\mathscr{dL}}{\mathscr{d}f} \cdot X_2\]

<h3 id="compute-fracdmathscrldw_1">Compute $\frac{d\mathscr{L}}{dW_1}$</h3>

<p>Now we will compute \(\scriptsize \frac{d\mathscr{L}}{dW_1}​\) to train \(\scriptsize W_1​\). The gradient will be propagated back to \(\scriptsize W_1​\) like this:</p>

\[\frac{d\mathscr{L}}{dW_1}=\frac{d\mathscr{L}}{df}\cdot \frac{df}{dX_2}\cdot \frac{dX_2}{dY_1}\cdot \frac{dY_1}{dW_1}\]

<p>the same as before, we know that \(\scriptsize Y_1 = W_1\cdot X_1 + b_1\), the above equation results in:</p>

\[\frac{d\mathscr{L}}{dW_1}=\frac{d\mathscr{L}}{df}\cdot W_2\cdot \frac{dX_2}{dY_1}\cdot X_1\]

<p>\(\scriptsize \frac{d\mathscr{L}}{df}\) is already known, \(\scriptsize \frac{dX_2}{dY_1}\) depends on the activation function of the hidden layer.</p>

<p>Using this method, we can easily propagate the gradient back to the input layer through the whole network and update all the layers, no matter how many layers are there in between.</p>
:ET