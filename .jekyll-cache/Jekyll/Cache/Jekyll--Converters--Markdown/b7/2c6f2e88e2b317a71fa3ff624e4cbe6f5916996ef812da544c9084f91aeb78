I"0<p>shared_ptr is a pointer allowed to be copied, it is like the normal pointer we use, but it’s smart for its counting function.</p>

<p>A normal pointer is not safe as when we are deleting it, we don’t know if someone else is using it. The shared_ptr count the users of this pointer, when someone release the pointer, its count will decrement, the memory block where it points will release only when the count becomes 0, which means no one is using it.</p>

<p><strong>Initialize</strong> a shared_ptr:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">s</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">{</span><span style="color: #859900">3</span><span style="color: #93a1a1">}</span> <span style="color: #93a1a1">};</span>
</code></pre></div></div>

<p>It can also be “<strong>made</strong>”, even made directly from value:</p>

<!-- more -->

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #cb4b16">int</span> <span style="color: #586e75">normalInt</span> <span style="color: #93a1a1">=</span> <span style="color: #859900">5</span><span style="color: #93a1a1">;</span>
<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">madePtr</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">make_shared</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span><span style="color: #93a1a1">(</span><span style="color: #586e75">normalInt</span><span style="color: #93a1a1">);</span>
<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">madePtr2</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">make_shared</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span><span style="color: #93a1a1">(</span><span style="color: #859900">1</span><span style="color: #93a1a1">);</span><span style="color: #657b83">//from number</span>
</code></pre></div></div>

<p>It can be <strong>copied</strong> and <strong>moved</strong>, when it is copied, its count increments:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">m</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">move</span><span style="color: #93a1a1">(</span><span style="color: #586e75">s</span><span style="color: #93a1a1">);</span>
<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">k</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">m</span><span style="color: #93a1a1">;</span>
<span style="color: #cb4b16">long</span> <span style="color: #586e75">count</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">k</span><span style="color: #93a1a1">.</span><span style="color: #586e75">use_count</span><span style="color: #93a1a1">();</span><span style="color: #657b83">//count is now 2</span>
</code></pre></div></div>

<p>Its release function is <strong>reset</strong>:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">k</span><span style="color: #93a1a1">.</span><span style="color: #586e75">reset</span><span style="color: #93a1a1">();</span>
<span style="color: #586e75">count</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">k</span><span style="color: #93a1a1">.</span><span style="color: #586e75">use_count</span><span style="color: #93a1a1">();</span><span style="color: #657b83">//count is now 1</span>
</code></pre></div></div>

<p>What’s more, <strong>it supports customer delete</strong>, when you want to do some additional deleting work except deleting the pointer itself, you may need it. The customer delete function will be called only when the user count is 0:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #6c71c4">struct</span> <span style="color: #b58900">V</span>
<span style="color: #93a1a1">{</span><span style="color: #657b83">//Our object</span>
	<span style="color: #cb4b16">int</span><span style="color: #93a1a1">*</span> <span style="color: #586e75">v</span><span style="color: #93a1a1">;</span>
	<span style="color: #586e75">V</span><span style="color: #93a1a1">()</span>
	<span style="color: #93a1a1">{</span>
		<span style="color: #586e75">v</span> <span style="color: #93a1a1">=</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">[</span><span style="color: #859900">100</span><span style="color: #93a1a1">];</span>
	<span style="color: #93a1a1">}</span>
<span style="color: #93a1a1">};</span>
<span style="color: #cb4b16">void</span> <span style="color: #586e75">deleteV</span><span style="color: #93a1a1">(</span><span style="color: #586e75">V</span><span style="color: #93a1a1">*</span> <span style="color: #586e75">vPtr</span><span style="color: #93a1a1">)</span>
<span style="color: #93a1a1">{</span><span style="color: #657b83">//Our customer delete function</span>
	<span style="color: #6c71c4">delete</span> <span style="color: #586e75">vPtr</span><span style="color: #93a1a1">-&gt;</span><span style="color: #586e75">v</span><span style="color: #93a1a1">;</span>
<span style="color: #93a1a1">}</span>
<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #586e75">V</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">newV</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #586e75">V</span><span style="color: #93a1a1">(),</span><span style="color: #586e75">deleteV</span><span style="color: #93a1a1">};</span><span style="color: #657b83">//customer delete as para</span>
<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #586e75">V</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">oldV</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">newV</span><span style="color: #93a1a1">;</span><span style="color: #657b83">//copied once, count is now 2</span>
<span style="color: #586e75">oldV</span><span style="color: #93a1a1">.</span><span style="color: #586e75">reset</span><span style="color: #93a1a1">();</span><span style="color: #657b83">//deleteV will not be called now, as count is 1</span>
<span style="color: #586e75">newV</span><span style="color: #93a1a1">.</span><span style="color: #586e75">reset</span><span style="color: #93a1a1">();</span><span style="color: #657b83">//deleteV will now be called, count is 0</span>
</code></pre></div></div>

<p><strong>It doesn’t support array!</strong></p>
:ET