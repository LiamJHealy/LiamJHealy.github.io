I"]!<p>You should include <memory> when using smart pointers</memory></p>

<h3 id="unique_ptr">unique_ptr</h3>

<p>Just as its name means, unique_ptr guarantees that <strong>there is only one pointer point to a specific memory block</strong>. So it cannot be copied by only moved.</p>

<p><strong>Init a unique_ptr</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">p</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span> <span style="color: #93a1a1">};</span>
<span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">p</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">{</span><span style="color: #859900">4</span><span style="color: #93a1a1">}</span> <span style="color: #93a1a1">};</span>
</code></pre></div></div>

<p>As you can see, smart pointers are wraps of normal pointers, we call them “raw” pointers.</p>

<!-- more -->

<p><strong>move a unique_ptr</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">q</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">p</span><span style="color: #93a1a1">;</span> <span style="color: #657b83">//wrong, copy is not allowed</span>
<span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">q</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">move</span><span style="color: #93a1a1">(</span><span style="color: #586e75">p</span><span style="color: #93a1a1">);</span><span style="color: #657b83">//move p to q</span>
<span style="color: #6c71c4">if</span> <span style="color: #93a1a1">(</span><span style="color: #586e75">p</span> <span style="color: #93a1a1">==</span> <span style="color: #586e75">nullptr</span><span style="color: #93a1a1">)</span>
		<span style="color: #586e75">cout</span> <span style="color: #93a1a1">&lt;&lt;</span> <span style="color: #859900">"p is null now</span><span style="color: #d33682">\n</span><span style="color: #859900">"</span><span style="color: #93a1a1">;</span>
</code></pre></div></div>

<p>unique_ptr can only be moved, when the original unique_ptr is moved to another one, the original unique_ptr will be equal to nullptr.</p>

<p><strong>delete a unique_ptr</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">p</span><span style="color: #93a1a1">.</span><span style="color: #586e75">release</span><span style="color: #93a1a1">();</span>
</code></pre></div></div>

<p>delete is not supported, you should use its “release” method.</p>

<p><strong>use unique_ptr for factory pattern</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">createnew</span><span style="color: #93a1a1">(){</span>
	<span style="color: #6c71c4">return</span> <span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span><span style="color: #93a1a1">{</span><span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">{</span><span style="color: #859900">4</span><span style="color: #93a1a1">}};</span>
<span style="color: #93a1a1">}</span><span style="color: #657b83">//produce a unique_ptr</span>
</code></pre></div></div>

<p><strong>when you return a unique_ptr in a function, it is actually use its move method implicitly.</strong> So the unique_ptr is cleanly produced that you get the original, unique pointer.</p>

<p><strong>What’s more, an unique_ptr can be moved to a shared_ptr!</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">q</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">{</span><span style="color: #859900">4</span><span style="color: #93a1a1">}</span> <span style="color: #93a1a1">};</span>
	<span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">s</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">move</span><span style="color: #93a1a1">(</span><span style="color: #586e75">q</span><span style="color: #93a1a1">);</span>
</code></pre></div></div>

<p>That means you can do the following:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span style="color: #586e75">shared_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">createnewShared</span><span style="color: #93a1a1">(){</span>
	<span style="color: #6c71c4">return</span> <span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">&gt;</span><span style="color: #93a1a1">{</span><span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">{</span> <span style="color: #859900">4</span> <span style="color: #93a1a1">}};</span>
<span style="color: #93a1a1">}</span><span style="color: #657b83">//produce a shared_ptr</span>
</code></pre></div></div>

<p>if you want to produce a shared_ptr, the original version as an unique_ptr is moved, which means the newly produced shared_ptr will be the only existed copy of the original version, this is very clean.</p>

<p>If you want to use unique_ptr for array, you should declare it as:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span style="color: #cb4b16">int</span> <span style="color: #586e75">n</span> <span style="color: #93a1a1">=</span> <span style="color: #859900">5</span><span style="color: #93a1a1">;</span>
	<span style="color: #586e75">unique_ptr</span><span style="color: #93a1a1">&lt;</span><span style="color: #cb4b16">int</span><span style="color: #93a1a1">[]</span><span style="color: #93a1a1">&gt;</span> <span style="color: #586e75">intArray</span><span style="color: #93a1a1">{</span> <span style="color: #6c71c4">new</span> <span style="color: #cb4b16">int</span><span style="color: #93a1a1">[</span><span style="color: #586e75">n</span><span style="color: #93a1a1">]</span> <span style="color: #93a1a1">};</span>
	<span style="color: #6c71c4">for</span> <span style="color: #93a1a1">(</span><span style="color: #cb4b16">int</span> <span style="color: #586e75">i</span> <span style="color: #93a1a1">=</span> <span style="color: #859900">0</span><span style="color: #93a1a1">;</span> <span style="color: #586e75">i</span> <span style="color: #93a1a1">&lt;</span> <span style="color: #586e75">n</span><span style="color: #93a1a1">;</span> <span style="color: #586e75">i</span><span style="color: #93a1a1">++</span><span style="color: #93a1a1">)</span>
		<span style="color: #586e75">intArray</span><span style="color: #93a1a1">[</span><span style="color: #586e75">i</span><span style="color: #93a1a1">]</span> <span style="color: #93a1a1">=</span> <span style="color: #586e75">i</span><span style="color: #93a1a1">;</span>
</code></pre></div></div>

:ET